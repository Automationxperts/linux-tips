function weather() {
	if [[ -z $1 ]]; then
		curl wttr.in/$1
	elif [[ -z $CITY ]]; then
		curl wttr.in/$CITY
	else
		echo "Please specify city!"
	fi
}

# Colorize output of man command
# http://tuxdiary.com/2016/06/16/color-man-pages/#more-27324
function man() {
    env \
    LESS_TERMCAP_mb=$'\e[01;31m' \
    LESS_TERMCAP_md=$'\e[01;31m' \
    LESS_TERMCAP_me=$'\e[0m' \
    LESS_TERMCAP_se=$'\e[0m' \
    LESS_TERMCAP_so=$'\e[01;44;33m' \
    LESS_TERMCAP_ue=$'\e[0m' \
    LESS_TERMCAP_us=$'\e[01;32m' \
    man "$@"
}

# Create a directory and change to it
function mcd() {
	mkdir -pv $1
	cd $1
}

# Use xdg-open in a subshell, derived output and detached
function open() {
    (nohup xdg-open "$1" >/dev/null 2>&1 &)
}

# Get latest statistics for COVID-19 in USA
function coronavirus_cases() {
	curl -s https://corona-stats.online/GT?minimal=true | head -n 3 | awk '{ print $2 $3 "\t"$5 "\t"$6 "\t" $7 "\t" $8 $9 "\t" $10 $11  }'
}

# Generate a random alphanumeric password
function genpass() {
	local passlen=${1:-32}		# Default length is 32 characters
	LC_ALL=C tr -cd '[:alnum:]' < /dev/urandom | fold -w $passlen | head -n1
}

# Display headers from a web site/URL (requires cURL)
function headers() {
	curl -sv "$@" 2>&1 >/dev/null |
		grep -v "^\*" |
		grep -v "^}" |
		cut -c3-
}

# Simple command-line calculator
function = {
	echo "$@" | bc -l
}
alias calc="="

# Get public IP address
function whats-my-ip() {
    ip=`curl --silent https://httpbin.org/ip | jq -r .origin`
    echo $ip | xclip -selection clipboard
    notify-send -t 5000 "$ip copied to clipboard."
}

function dirsize() {
    sudo du -cxh -d 1 . | sort -h;
}

alias ls='ls --group-directories-first --time-style=+"%m/%d/%Y %H:%M" --color=auto -F'
alias ll='ls -lrt --group-directories-first --time-style=+"%m/%d/%Y %H:%M" --color=auto -F'
alias la='ls -la --group-directories-first --time-style=+"%m/%d/%Y %H:%M" --color=auto -F'

alias rm='rm -i -v'
alias cp='cp -v'
alias mv='mv -v'
alias mkdir='mkdir -pv'
alias top='htop'
alias apt-version='apt-cache madison'
alias more='less'

# Colorize output of ip command
alias ip='ip -c'

# Get public IP address
alias publicip='curl https://ipecho.net/plain; echo'

# Searchable 'ps' command alias
alias psg="ps aux | grep -v grep | grep -i -e VSZ -e"

# Summary of top 10 commands from history
alias hist_summary='history | awk '\''{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}'\'' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl |  head -n10'

alias dateiso='date -u +"%Y-%m-%dT%H:%M:%SZ"'

# Git aliases
alias gitlog='git log --all --decorate --graph --oneline'
alias glog="git log --graph --pretty=format:'%Cred%h%Creset %an: %s - %Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=relative"
# Undo last commit, but don't throw away your changes.
alias git-undo="git reset --soft HEAD^"

# Run Docker GUI application in container.
# Specify the Docker container name on command line.
# Ensure that 'xhost' has been run prior to enable permissions to X11 display.
alias d-run="docker run --rm -it --net=host --cpuset-cpus 0 --memory 512mb -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=unix$DISPLAY "

# Functionalize 'command -v' to allow 'if get_command [command]' idiom
# https://github.com/rawiriblundell/dotfiles/blob/master/.bashrc
get_command() {
  local errcount cmd
  case "${1}" in
    (-v|--verbose)
      shift 1
      errcount=0
      for cmd in "${@}"; do
        command -v "${cmd}" || 
          { printf -- '%s\n' "${cmd} not found"; (( errcount++ )); }
      done
      (( errcount == 0 )) && return 0
    ;;
    ('')
      printf -- '%s\n' "get_command [-v|--verbose] list of commands" \
        "get_command will emit return code 1 if any listed command is not found" >&2
      return 0
    ;;
    (*)
      errcount=0
      for cmd in "${@}"; do
        command -v "${1}" >/dev/null 2>&1 || (( errcount++ ))
      done
      (( errcount == 0 )) && return 0
    ;;
  esac
  # If we get to this point, we've failed
  return 1
}
alias exists="get_command"
alias is_command="get_command"
